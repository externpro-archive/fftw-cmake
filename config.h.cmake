include(CheckFunctionExists)
include(CheckIncludeFile)
include(CheckSymbolExists)
include(CheckTypeSize)
set(DISABLE_FORTRAN 1)
set(FFTW_CC ${CMAKE_C_COMPILER})
CHECK_FUNCTION_EXISTS(abort HAVE_ABORT)
CHECK_FUNCTION_EXISTS(cosl HAVE_COSL) # fftw-3.3-libs defined 1
CHECK_SYMBOL_EXISTS(cosl math.h HAVE_DECL_COSL)
CHECK_SYMBOL_EXISTS(drand48 stdlib.h HAVE_DECL_DRAND48)
CHECK_SYMBOL_EXISTS(memalign stdlib.h;malloc.h HAVE_DECL_MEMALIGN)
CHECK_SYMBOL_EXISTS(posix_memalign stdlib.h HAVE_DECL_POSIX_MEMALIGN)
CHECK_SYMBOL_EXISTS(sinl math.h HAVE_DECL_SINL)
CHECK_SYMBOL_EXISTS(sinq math.h HAVE_DECL_SINQ)
CHECK_SYMBOL_EXISTS(srand48 stdlib.h HAVE_DECL_SRAND48)
CHECK_INCLUDE_FILE(limits.h HAVE_LIMITS_H)
CHECK_TYPE_SIZE("long double" LONG_DOUBLE) # HAVE_LONG_DOUBLE holds existence of type
CHECK_INCLUDE_FILE(malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILE(memory.h HAVE_MEMORY_H)
CHECK_FUNCTION_EXISTS(memset HAVE_MEMSET)
include(FindOpenMP)
set(HAVE_OPENMP OPENMP_FOUND)
CHECK_FUNCTION_EXISTS(sinl HAVE_SINL) # fftw-3.3-libs defined 1
CHECK_FUNCTION_EXISTS(sqrt HAVE_SQRT)
set(HAVE_SSE2 1)
CHECK_INCLUDE_FILE(stddef.h HAVE_STDDEF_H)
CHECK_INCLUDE_FILE(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILE(stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILE(string.h HAVE_STRING_H)
CHECK_INCLUDE_FILE(sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILE(sys/types.h HAVE_SYS_TYPES_H)
CHECK_FUNCTION_EXISTS(tanl HAVE_TANL) # fftw-3.3-libs defined 1
CHECK_TYPE_SIZE(uintptr_t UINTPTR_T) # HAVE_UINTPTR_T holds existence of type
CHECK_FUNCTION_EXISTS(vprintf HAVE_VPRINTF)
set(PACKAGE fftw)
set(PACKAGE_VERSION 3.3)
set(PACKAGE_BUGREPORT fftw@fftw.org)
set(PACKAGE_URL http://www.fftw.org)
set(PACKAGE_NAME ${PACKAGE})
set(PACKAGE_STRING ${PACKAGE}-${PACKAGE_VERSION})
set(PACKAGE_TARNAME ${PACKAGE})
CHECK_TYPE_SIZE(double SIZEOF_DOUBLE)
CHECK_TYPE_SIZE(float SIZEOF_FLOAT)
CHECK_TYPE_SIZE(int SIZEOF_INT)
CHECK_TYPE_SIZE(long SIZEOF_LONG)
CHECK_TYPE_SIZE("long long" SIZEOF_LONG_LONG)
CHECK_TYPE_SIZE(ptrdiff_t SIZEOF_PTRDIFF_T)
CHECK_TYPE_SIZE(size_t SIZEOF_SIZE_T)
CHECK_TYPE_SIZE("unsigned int" SIZEOF_UNSIGNED_INT)
CHECK_TYPE_SIZE("unsigned long" SIZEOF_UNSIGNED_LONG)
CHECK_TYPE_SIZE("unsigned long long" SIZEOF_UNSIGNED_LONG_LONG)
CHECK_TYPE_SIZE("void*" SIZEOF_VOID_P)
set(STDC_HEADERS 1)
set(VERSION ${PACKAGE_VERSION})
set(WITH_OUR_MALLOC 1)
if(NOT DEFINED C_INLINE)
  # test how compiler defines inline (like autoconf's AC_C_INLINE)
  # http://www.cmake.org/pipermail/cmake/2007-September/016285.html
  message(STATUS "Determining inline definition")
  file(WRITE ${CMAKE_BINARY_DIR}/CMakeFiles/test_inline.c
    "/* Test source lifted from autoconf/c.m4 */\n"
    "typedef int foo_t;\n"
    "static inline foo_t static_foo() { return 0; }\n"
    "foo_t foo() { return 0; }\n"
    "int main(int argc, char* argv[]) { return 0; }\n"
    )
  set(C_INLINE_KEYWORD " ")
  foreach(KEYWORD inline __inline__ __inline)
    try_compile(C_HAS_${KEYWORD} ${CMAKE_BINARY_DIR}
      ${CMAKE_BINARY_DIR}/CMakeFiles/test_inline.c
      COMPILE_DEFINITIONS "-Dinline=${KEYWORD}"
      )
    if(C_HAS_${KEYWORD})
      set(C_INLINE TRUE CACHE INTERNAL "test_inline: boolean")
      set(C_INLINE_KEYWORD ${KEYWORD} CACHE INTERNAL "test_inline: keyword")
    endif()
  endforeach()
  if(C_INLINE)
    message(STATUS "Determining inline definition - done")
  else()
    message(STATUS "Determining inline definition - failed")
  endif()
endif(NOT DEFINED C_INLINE)
set(inline ${C_INLINE_KEYWORD})
configure_file(config.h.in ${CMAKE_BINARY_DIR}/config.h)
